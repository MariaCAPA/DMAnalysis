/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooDMInteg.h" 
#include "RooAbsReal.h" 
#include "RooRealVar.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "DMRate.hh"

ClassImp(RooDMInteg) 

 RooDMInteg::RooDMInteg(const char *name, const char *title, 
                        RooAbsReal& _sSI,
                        RooAbsReal& _mW,
                        RooAbsReal& _exposure) :
   RooAbsReal(name,title), 
    sSI("sSI","sSI",this,_sSI),
    mW("mW","mW",this,_mW),
    exposure("exposure","exposure",this,_exposure)
 { 
   eneIni = 0;
   eneEnd = 10;
 } 


 RooDMInteg::RooDMInteg(const RooDMInteg& other, const char* name) :  
   RooAbsReal(other,name), 
    sSI("sigmaSI","sigmaSI",this,( RooAbsReal&)other.sSI.arg()),
    mW("mW","mW",this,( RooAbsReal&)other.mW.arg()),
    exposure("exposure","exposure",this,( RooAbsReal&)other.exposure.arg())
 { 
   eneIni = other.eneIni;
   eneEnd = other.eneEnd;
   fDMRate = new DMRate(*(other.fDMRate));

 } 

 int RooDMInteg::initialize(const char * fileRate, Double_t eIni, Double_t eEnd)
{
  if (fDMRate) delete fDMRate;

  fDMRate = new DMRate();
  fDMRate->Initialize((char * )fileRate);

  eneIni = eIni;
  eneEnd = eEnd;
}


 Double_t RooDMInteg::evaluate() const 
 { 
   Double_t retval = 1;
   DMRate theRate (*fDMRate);

   theRate.SetMW(mW);
   theRate.SetSigSI(sSI);

   // TODO
   // by now, not take into account modulation...integrate only 
   // not modulated part in energy
   Double_t ee;
   double S0, Sm, Phi;
   retval = 0;
   for (ee=eneIni; ee<=eneEnd; ee++)
   {
     theRate.Rate(ee, &S0, &Sm, &Phi);
     retval += S0;
   }

   retval *= exposure;

   return retval;
 } 



